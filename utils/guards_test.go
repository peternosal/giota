package utils

import (
	"github.com/iotaledger/giota/trinary"
	"testing"
)

type testcase struct {
	value  trinary.Trytes
	length int
	expect bool
}

var testcases = []testcase{
	{value: "ABCDEF", length: 6, expect: true},
	{value: "ABCDEF", length: 5, expect: false},
	{value: "abcdef", length: 6, expect: false},
	{value: "abcdef", length: 5, expect: false},
}

var testcases2 = []testcase{
	{value: "ABCDEF", length: 10, expect: true},
	{value: "ABCDEF", length: 6, expect: true},
	{value: "abcdef", length: 6, expect: false},
	{value: "abcdef", length: 5, expect: false},
}

func TestIsTrytesOfExactLength(t *testing.T) {
	for i, test := range testcases {
		match := IsTrytesOfExactLength(test.value, test.length)
		if match != test.expect {
			t.Fatalf("#%d expected match for value %s to be %v but was %v\n", i, test.value, test.expect, match)
		}
	}
}

func TestIsTrytesOfMaxLength(t *testing.T) {
	for i, test := range testcases2 {
		match := IsTrytesOfMaxLength(test.value, test.length)
		if match != test.expect {
			t.Fatalf("#%d expected match for value %s to be %v but was %v\n", i, test.value, test.expect, match)
		}
	}
}

func TestIsEmptyTrytes(t *testing.T) {
	reallyEmpty := trinary.Trytes("99999999")
	if !IsEmptyTrytes(reallyEmpty) {
		t.Fatalf("expected value '%s' to act as empty\n", reallyEmpty)
	}

	notReallyEmptyExamples := []trinary.Trytes{
		("999 999"), (""), (" 999999"),
	}
	for _, notReallyEmpty := range notReallyEmptyExamples {
		if IsEmptyTrytes(notReallyEmpty) {
			t.Fatalf("expected value '%s' to not act as empty\n", notReallyEmpty)
		}
	}
}

var validAddresses = []trinary.Trytes{
	("TXBGJB9NORCEHAAWVCQRC9GQSLQCWUIKDOBYTDKVYY9GUQHPJQMKHGNWRWIFLEBPJNAAIOMUFRFLDQUECB9UMGFVBD"),
	("TXBGJB9NORCEHAAWVCQRC9GQSLQCWUIKDOBYTDKVYY9GUQHPJQMKHGNWRWIFLEBPJNAAIOMUFRFLDQUEC"),
	("INLF9FQCR9XWEKPKLUPZZJMRRDUGSOCKWVYFIDMHEVKKZIKJHGWPNMCFQ9KOONDHBOOHYWSPCZMMMKKPYFETUFYMIX"),
	("INLF9FQCR9XWEKPKLUPZZJMRRDUGSOCKWVYFIDMHEVKKZIKJHGWPNMCFQ9KOONDHBOOHYWSPCZMMMKKPY"),
}

func TestIsHash(t *testing.T) {
	for _, validAddress := range validAddresses {
		if !IsHash(validAddress) {
			t.Fatalf("expected %s to be a hash\n", validAddress)
		}
	}
}

var txHashesMWM14 = []string{
	"MPDUQUZCQANRQPYTVROTXUGWSDESYZPMIMOGCGPX9IAWMXIPTHBIDNRJFYFQKCZWUVNYCQQGGX9OA9999",
	"IKMAFVAK9IMRAM9OYIJTMYTMCBGRHTJZ99RMJMVRELMULVSWRMXRJDSEG9PZJUARY9ESH9ARVXLA99999",
	"KVCLRTNBXSHSTVXPRYLWIWFH9WCDXCA9UUL9KKXJTNII9UFBX9ZQTVK9FVHQEWGZZEMQRLEDULTBA9999",
}

func TestIsTxHashWithMWM(t *testing.T) {
	for _, txHash := range txHashesMWM14 {
		if !IsTxHashWithMWM(trinary.Trytes(txHash), 14) {
			t.Fatalf("expected a MWM of 14 to be correct for transaction hash %s\n", txHash)
		}
	}
}

var txTrytesMWM14 = []trinary.Trytes{
	
	
	
}

func TestIsTransactionTrytesWithMWM(t *testing.T) {
	for _, txTrytes := range txTrytesMWM14 {
		ok, err := IsTransactionTrytesWithMWM(txTrytes, 14)
		if err != nil {
			t.Fatalf("didn't expect error %v from test values\n", err)
		}
		if !ok {
			t.Fatalf("expected a MWM of 14 to be correct for transaction trytes %s\n", txTrytes)
		}
	}
}

func TestIsAttachedTrytes(t *testing.T) {
	for _, txTrytes := range txTrytesMWM14 {
		if !IsAttachedTrytes(txTrytes) {
			t.Fatalf("expected transaction to count as attached for transaction trytes %s\n", txTrytes)
		}
	}
}
